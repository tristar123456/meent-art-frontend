{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport let AuthInterceptor = /*#__PURE__*/(() => {\n  class AuthInterceptor {\n    constructor(authService) {\n      this.authService = authService;\n    }\n\n    getCookie(name) {\n      let cookieValue = null;\n\n      if (document.cookie && document.cookie !== '') {\n        const cookies = document.cookie.split(';');\n\n        for (let i = 0; i < cookies.length; i++) {\n          const cookie = cookies[i].trim(); // Does this cookie string begin with the name we want?\n\n          if (cookie.substring(0, name.length + 1) === name + '=') {\n            cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n            break;\n          }\n        }\n      }\n\n      return cookieValue;\n    }\n\n    intercept(request, next) {\n      const accessToken = this.authService.getToken() || '';\n      const csrftoken = this.getCookie('csrftoken') || ''; // set global application headers.\n\n      request = request.clone({\n        setHeaders: {\n          'Content-Type': 'application/json; charset=utf-8',\n          Accept: 'application/json'\n        }\n      }); // Set headers for requests that require CSRF.\n\n      if (csrftoken != '') {\n        request = request.clone({\n          headers: request.headers.set('X-CSRFTOKEN', csrftoken)\n        });\n      } // Set headers for requests that require authorization.\n\n\n      if (accessToken != '') {\n        const authenticatedRequest = request.clone({\n          headers: request.headers.set('Authorization', 'Bearer ' + accessToken)\n        }); // Request with authorization headers\n\n        return next.handle(authenticatedRequest);\n      } else {\n        // Request without authorization header\n        return next.handle(request);\n      }\n    }\n\n  }\n\n  AuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n    return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n  };\n\n  AuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthInterceptor,\n    factory: AuthInterceptor.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}
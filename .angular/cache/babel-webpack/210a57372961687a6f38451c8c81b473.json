{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport { distinctUntilChanged } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nexport let ResizeService = /*#__PURE__*/(() => {\n  class ResizeService {\n    constructor() {\n      this.resizeSubject = new Subject();\n      this.resizeSubject.subscribe(size => {\n        this.currentVal = size;\n      });\n    }\n\n    get onResize$() {\n      return this.resizeSubject.asObservable().pipe(distinctUntilChanged());\n    }\n\n    get current() {\n      return this.currentVal;\n    }\n\n    onResize(size) {\n      this.resizeSubject.next(size);\n    }\n\n  }\n\n  ResizeService.ɵfac = function ResizeService_Factory(t) {\n    return new (t || ResizeService)();\n  };\n\n  ResizeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ResizeService,\n    factory: ResizeService.ɵfac,\n    providedIn: 'root'\n  });\n  return ResizeService;\n})();","map":null,"metadata":{},"sourceType":"module"}
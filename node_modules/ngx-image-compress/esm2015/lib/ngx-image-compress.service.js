/**
 * @fileoverview added by tsickle
 * Generated from: lib/ngx-image-compress.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, RendererFactory2 } from '@angular/core';
import { ImageCompress } from './image-compress';
import { DOC_ORIENTATION } from './DOC_ORIENTATION';
export class NgxImageCompressService {
    /**
     * @param {?} rendererFactory
     */
    constructor(rendererFactory) {
        this.DOC_ORIENTATION = DOC_ORIENTATION;
        this.render = rendererFactory.createRenderer(null, null);
    }
    /**
     * @param {?} image
     * @return {?}
     */
    byteCount(image) {
        return ImageCompress.byteCount(image);
    }
    /**
     * Get the correct Orientation value from the EXIF tags in the specified file.
     * @param {?} file
     * @return {?}
     */
    getOrientation(file) {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        (resolve) => {
            ImageCompress.getOrientation(file, (/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                resolve(result);
            }));
        }));
    }
    /**
     * @return {?}
     */
    uploadFile() {
        return ImageCompress.uploadFile(this.render);
    }
    /**
     * @param {?} image
     * @param {?} orientation
     * @param {?=} ratio
     * @param {?=} quality
     * @return {?}
     */
    compressFile(image, orientation, ratio = 50, quality = 50) {
        return ImageCompress.compress(image, orientation, this.render, ratio, quality);
    }
}
NgxImageCompressService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NgxImageCompressService.ctorParameters = () => [
    { type: RendererFactory2 }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    NgxImageCompressService.prototype.render;
    /** @type {?} */
    NgxImageCompressService.prototype.DOC_ORIENTATION;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWltYWdlLWNvbXByZXNzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LWltYWdlLWNvbXByZXNzL3NyYy8iLCJzb3VyY2VzIjpbImxpYi9uZ3gtaW1hZ2UtY29tcHJlc3Muc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQWEsZ0JBQWdCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDdEUsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBQy9DLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUdsRCxNQUFNLE9BQU8sdUJBQXVCOzs7O0lBTWxDLFlBQVksZUFBaUM7UUFGdEMsb0JBQWUsR0FBRyxlQUFlLENBQUM7UUFHdkMsSUFBSSxDQUFDLE1BQU0sR0FBRyxlQUFlLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUMzRCxDQUFDOzs7OztJQUVNLFNBQVMsQ0FBQyxLQUFLO1FBQ3BCLE9BQU8sYUFBYSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUN4QyxDQUFDOzs7Ozs7SUFHTSxjQUFjLENBQUMsSUFBVTtRQUM5QixPQUFPLElBQUksT0FBTzs7OztRQUFrQixDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQzlDLGFBQWEsQ0FBQyxjQUFjLENBQUMsSUFBSTs7OztZQUFFLENBQUMsTUFBTSxFQUFFLEVBQUU7Z0JBQzVDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUNsQixDQUFDLEVBQUMsQ0FBQztRQUNMLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7OztJQUVNLFVBQVU7UUFDZixPQUFPLGFBQWEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQy9DLENBQUM7Ozs7Ozs7O0lBRU0sWUFBWSxDQUFDLEtBQWEsRUFBRSxXQUE0QixFQUFFLFFBQWdCLEVBQUUsRUFBRSxVQUFrQixFQUFFO1FBQ3ZHLE9BQU8sYUFBYSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2pGLENBQUM7OztZQTlCRixVQUFVOzs7O1lBSm9CLGdCQUFnQjs7Ozs7OztJQU83Qyx5Q0FBMEI7O0lBRTFCLGtEQUF5QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZSwgUmVuZGVyZXIyLCBSZW5kZXJlckZhY3RvcnkyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7SW1hZ2VDb21wcmVzc30gZnJvbSAnLi9pbWFnZS1jb21wcmVzcyc7XG5pbXBvcnQge0RPQ19PUklFTlRBVElPTn0gZnJvbSAnLi9ET0NfT1JJRU5UQVRJT04nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTmd4SW1hZ2VDb21wcmVzc1NlcnZpY2Uge1xuXG4gIHByaXZhdGUgcmVuZGVyOiBSZW5kZXJlcjI7XG5cbiAgcHVibGljIERPQ19PUklFTlRBVElPTiA9IERPQ19PUklFTlRBVElPTjtcblxuICBjb25zdHJ1Y3RvcihyZW5kZXJlckZhY3Rvcnk6IFJlbmRlcmVyRmFjdG9yeTIpIHtcbiAgICB0aGlzLnJlbmRlciA9IHJlbmRlcmVyRmFjdG9yeS5jcmVhdGVSZW5kZXJlcihudWxsLCBudWxsKTtcbiAgfVxuXG4gIHB1YmxpYyBieXRlQ291bnQoaW1hZ2UpIHtcbiAgICByZXR1cm4gSW1hZ2VDb21wcmVzcy5ieXRlQ291bnQoaW1hZ2UpO1xuICB9XG5cbiAgLyoqIEdldCB0aGUgY29ycmVjdCBPcmllbnRhdGlvbiB2YWx1ZSBmcm9tIHRoZSBFWElGIHRhZ3MgaW4gdGhlIHNwZWNpZmllZCBmaWxlLiAqL1xuICBwdWJsaWMgZ2V0T3JpZW50YXRpb24oZmlsZTogRmlsZSk6IFByb21pc2U8RE9DX09SSUVOVEFUSU9OPiB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPERPQ19PUklFTlRBVElPTj4oKHJlc29sdmUpID0+IHtcbiAgICAgIEltYWdlQ29tcHJlc3MuZ2V0T3JpZW50YXRpb24oZmlsZSwgKHJlc3VsdCkgPT4ge1xuICAgICAgICByZXNvbHZlKHJlc3VsdCk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyB1cGxvYWRGaWxlKCk6IFByb21pc2U8eyBpbWFnZTogc3RyaW5nLCBvcmllbnRhdGlvbjogRE9DX09SSUVOVEFUSU9OIH0+IHtcbiAgICByZXR1cm4gSW1hZ2VDb21wcmVzcy51cGxvYWRGaWxlKHRoaXMucmVuZGVyKTtcbiAgfVxuXG4gIHB1YmxpYyBjb21wcmVzc0ZpbGUoaW1hZ2U6IHN0cmluZywgb3JpZW50YXRpb246IERPQ19PUklFTlRBVElPTiwgcmF0aW86IG51bWJlciA9IDUwLCBxdWFsaXR5OiBudW1iZXIgPSA1MCk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgcmV0dXJuIEltYWdlQ29tcHJlc3MuY29tcHJlc3MoaW1hZ2UsIG9yaWVudGF0aW9uLCB0aGlzLnJlbmRlciwgcmF0aW8sIHF1YWxpdHkpO1xuICB9XG5cbn1cbiJdfQ==